
/* Service apply rules.
 * Tip: Use `icinga2 object list --type Service` to list all service objects after running
 * configuration validation (`icinga2 daemon -C`). */

/* ############# Pour les serveurs physiques seulement ############ */

/* 1 - Etat de sante HDD */
apply Service "by_ssh_check_disk_state" {
  import "generic-service-standard"
  check_command = "by_ssh_check_disk_state"
  vars.by_ssh_logname = "root"
  assign where host.vars.type == "fixe"
}

/* ############# Pour les serveurs physiques & hyperviseur ############ */

/* 2 - Temperature et ventilateur */
apply Service "by_ssh_check_temp" {
  import "generic-service-standard"
  check_command = "by_ssh_check_temp"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type == "hyperviseur"
}

/* 3 - RAID Logiciel */
/* En cours */

/* 4 - Check pile CMOS */
/* En cours */

/* 5 - Consommation électrique */
/* En cours */

/* 6 - Redondance et etat de l alimentation */
/* En cours */

/* Pour les Hyperviseur Proxmox
/
*** Proxmox - PVE ***/

template Service "pve-service" {
  import "generic-service-standard"
  check_command = "pve"
}

apply Service "services" {
  import "pve-service"
  vars.pve_mode = "services"
  // Ignore cluster status on single nodes
  if (!host.vars.pve_cluster) {
    vars.pve_ignore_services = host.vars.pve_ignore_services || []
    vars.pve_ignore_services.add("corosync")
  }
  assign where host.vars.pve_host
}

//apply Service "updates" {
//  import "pve-service"
//  check_interval = 12h
//  retry_interval = 2h
//  max_check_attempts = 3
//  vars.pve_mode = "updates"
//  assign where host.vars.pve_host
//}

apply Service "disk-health" {
  import "pve-service"
  vars.pve_mode = "disk-health"
  assign where host.vars.pve_host
}

apply Service "cluster" {
  import "pve-service"
  vars.pve_mode = "cluster"
  assign where host.vars.pve_host && host.vars.pve_cluster
}

/* ############# Pour les machines virtuelles ############ */

/* 1 - Check du processeur */
apply Service "by_ssh_check_load" {
  import "generic-service-critical"
  check_command = "by_ssh_check_load"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* 2 - Check mem */
/* En cours */

/* 3 - Check swap */
apply Service "by_ssh_check_swap" {
  import "generic-service-critical"
  check_command = "by_ssh_check_swap"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* 4 - Check espace disque */
apply Service "by_ssh_check_disk" {
  import "generic-service-critical"
  check_command = "by_ssh_check_disk"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* 5 - Check du temps */
/* En cours */

/* 6 - Check APT */
apply Service "by_ssh_apt" {
  import "generic-service-standard"
  check_command = "by_ssh_apt"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* 7 - Check processus zombie */
apply Service "by_ssh_zombie" {
  import "generic-service-standard"
  check_command = "by_ssh_zombie"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* 8 - Check uptime */
/* En cours */

/* 9 – Check utilisateurs connecté */
apply Service "by_ssh_check_users" {
  import "generic-service-standard"
  check_command = "by_ssh_check_users"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* 10 – Check HTTP */
/* En cours */

/* 11 – Check IO */
apply Service "by_ssh_check_io" {
  import "generic-service-standard"
  check_command = "by_ssh_check_io"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_check == "check_by_ssh"
}

/* ############# Autre/applicatif ############ */

/* 12 – Check Cron */
/* En cours */

/* 12 – Check API */
/* En cours */

apply Service "by_ssh_check_mount" {
  import "generic-service-standard"
  check_command = "by_ssh_check_mount"
  vars.by_ssh_logname = "user_supervision"
  assign where host.vars.type_nfs == "oui"
}

/* ############# Pour serveurs docker ############ */

apply Service "by_ssh_docker_memory" {
  import "generic-service-critical"
  check_command = "by_ssh_docker_memory"
  vars.by_ssh_logname = "root"
  assign where host.vars.type == "hote_docker"
}

apply Service "by_ssh_docker_cpu" {
  import "generic-service-critical"
  check_command = "by_ssh_docker_cpu"
  vars.by_ssh_logname = "root"
  assign where host.vars.type == "hote_docker"
}

apply Service "by_ssh_docker_status" {
  import "generic-service-critical"
  check_command = "by_ssh_docker_status"
  vars.by_ssh_logname = "root"
  assign where host.vars.type == "hote_docker"
}

/* ############# Pour les imprimantes ############ */

/*** Imprimante ***/

apply Service "check_printer_snmp_xerox7120_black" {
  import "generic-service-standard"
  check_command = "check_printer_Xerox7120_Black"
  assign where host.vars.type == "imprimante_xerox7120"
}

apply Service "check_printer_snmp_xerox7120_yellow" {
  import "generic-service-standard"
  check_command = "check_printer_Xerox7120_Yellow"
  assign where host.vars.type == "imprimante_xerox7120"
}

apply Service "check_printer_snmp_xerox7120_magenta" {
  import "generic-service-standard"
  check_command = "check_printer_Xerox7120_Magenta"
  assign where host.vars.type == "imprimante_xerox7120"
}

apply Service "check_printer_snmp_xerox7120_cyan" {
  import "generic-service-standard"
  check_command = "check_printer_Xerox7120_Cyan"
  assign where host.vars.type == "imprimante_xerox7120"
}

apply Service "check_printer_snmp_brother_black" {
  import "generic-service-standard"
  check_command = "check_printer_Brother_Black"
  assign where host.vars.type == "imprimante_brother"
}
apply Service "check_printer_snmp_brother_drum" {
  import "generic-service-standard"
  check_command = "check_printer_Brother_Drum"
  assign where host.vars.type == "imprimante_brother"
}

/* ##################### Serveur Externe ################## */

apply Service "by_ssh_check_disk_state" {
  import "generic-service-standard"
  check_command = "by_ssh_check_disk_state"
  vars.by_ssh_logname = "root"
  assign where host.vars.type == "hote_physique"
}

/*** Hote NAS ***/
apply Service "by_snmp_qnap_check_hdstatus" {
  import "generic-service-standard"
  check_command = "by_snmp_qnap_check_hdstatus"
  assign where host.vars.type == "NAS"
}

apply Service "by_snmp_qnap_check_raidstatus" {
  import "generic-service-standard"
  check_command = "by_snmp_qnap_check_raidstatus"
  assign where host.vars.type == "NAS"
}

apply Service "by_snmp_qnap_check_diskusage" {
  import "generic-service-standard"
  check_command = "by_snmp_qnap_check_diskusage"
  assign where host.vars.type == "NAS"
}

/*** Autre ***/

/*** local ***/



apply Service "by_ssh_docker_version_vox" {
  import "generic-service-standard"
  check_command = "by_ssh_docker_version_vox"
  vars.by_ssh_logname = "root"
  assign where host.vars.type == "hote_docker"
}

/*** Windows ***/

/* Disque */
object Service "nscp-disk" {
  import "generic-service-standard"
  host_name = "SRV-XXXXXX"  
  check_command = "nscp"
  vars.nscp_password = "XXXXXXXXXXXXXXXXXXX"
  vars.nscp_variable = "USEDDISKSPACE"
  vars.nscp_params = "c"
  vars.nscp_warn = 70
  vars.nscp_crit = 80
  /* assign where host.vars.os == "Windows" */
}

/* Memoire */
object Service "nscp-memory" {
  import "generic-service-standard"
  host_name = "SRV-XXXXXX"
  check_command = "nscp"
  vars.nscp_password = "XXXXXXXXXXXXXXXXXXX"
  vars.nscp_variable = "MEMUSE"
  vars.nscp_warn = 80
  vars.nscp_crit = 90
  /* assign where host.vars.os == "Windows" */
}

/* CPU */
object Service "nscp-cpu" {
  import "generic-service-standard"
  host_name = "SRV-XXXXXX"
  check_command = "nscp"
  vars.nscp_password = "XXXXXXXXXXXXXXXXXXX"
  vars.nscp_variable = "CPULOAD"
  vars.nscp_params = "60,90,95,120,90,95"
  /* assign where host.vars.os == "Windows" */
}

object Service "nscp-versionnsclient" {
  import "generic-service-standard"
  host_name = "SRV-XXXXXX"
  check_command = "nscp"
  vars.nscp_password = "XXXXXXXXXXXXXXXXXXX"
  vars.nscp_variable = "CLIENTVERSION"
  /* assign where host.vars.os == "Windows" */
}

apply Service "ping4" {
  import "generic-service-critical"
  check_command = "ping4"
  assign where host.address
}

apply Service "ping6" {
  import "generic-service-critical"
  check_command = "ping6"
  assign where host.address6
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */
apply Service "ssh" {
  import "generic-service-critical"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

// -- Check VM status Proxmox --

apply Service "io_wait" {
  import "pve-service"
  vars.pve_mode = "io_wait"
  vars.pve_warning = 10
  vars.pve_critical = 30
  assign where host.vars.pve_host
}
apply Service "cpu" {
  import "pve-service"
  vars.pve_mode = "cpu"
  vars.pve_warning = 70
  vars.pve_critical = 90
  assign where host.vars.pve_host
}
//apply Service "memory" {
//  import "pve-service"
//  vars.pve_mode = "memory"
//  vars.pve_unit = "%"
//  vars.pve_warning = 80
//  vars.pve_critical = 90
//  assign where host.vars.pve_host
//}

//apply Service "storage " for (storage => config in host.vars.pve_storage) {
//  import "pve-service"
//  vars += config
//  vars.pve_mode = "storage"
//  vars.pve_resource_name = storage
//}
