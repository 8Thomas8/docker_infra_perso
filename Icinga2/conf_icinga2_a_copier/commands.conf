/* ############# Pour les serveurs physiques/hyperviseur ############ */

/* 1 - Etat de sante HDD */
object CheckCommand "by_ssh_check_disk_state" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_ide_smart -d /dev/sda"
}

/* 2 -Temperature et ventilateur */
object CheckCommand "by_ssh_check_temp" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_temp.sh --sensor 'Core 0' -w 50 -c 100"
}

/* 3 – RAID Logiciel */
/* En cours */

/* 4 – Check pile CMOS */
/* En cours */

/* 5 – Consommation électrique */
/* En cours */

/* 6 – Redondance et état de lalimentation */
/* En cours */

/* ################ Pour les serveurs Hyperviseur Proxmox ############### */

object CheckCommand "pve" {
        import "plugin-check-command"
        command = [ PluginDir + "/check_pve.py" ]
        arguments = {
                "-e" = {
                        value = "$pve_host$"
                        required = true
                        description = "Hostname for PVE API"
                }
                "-u" = {
                        value = "$pve_user$"
                        required = true
                        description = "API user (ex. monitoring@pve)"
                }
                "-p" = {
                        value = "$pve_password$"
                        required = true
                        description = "API user password"
                }
                "-k" = {
                        set_if = "$pve_insecure_connection$"
                        description = "Connect to this host instead of $pve_host$"
                }
                "-m" = {
                        value = "$pve_mode$"
                        required = true
                        description = "Check mode (cluster, version, updates, subscription, storage, cpu, memory, io_wait, vm, replication)"
                }
                "-n" = {
                        value = "$pve_node$"
                        description = "Node to check (necessary for all modes except cluster and version)"
                }
                "--name" = {
                        value = "$pve_resource_name$"
                        description = "Name of storage or vm to check"
                }
                "--expected-vm-status" = {
                        value = "$pve_expected_vm_status$"
                        description = "Expected status of the VM"
                }
                "--ignore-service" = {
                        repeat_key = true
                        value = "$pve_ignore_services$"
                        description = "Ignore services in check"
                }
                "--ignore-disk" = {
                        repeat_key = true
                        value = "$pve_ignore_disks$"
                        description = "Ignore disks in check"
                }
                "--ignore-vm-status" = {
                        set_if = "$pve_ignore_vm_status$"
                        description = "Ignore VM status in check"
                }
                "-w" = {
                        value = "$pve_warning$"
                        description = "Warning treshold"
                }
                "-c" = {
                        value = "$pve_critical$"
                        description = "Critical treshold"
                }
                "-M" = {
                        set_if = "$pve_tresholds_mb$"
                        description = "Unit of tresholds and values is MB"
                }
                "-V" = {
                        value = "$pve_min_version$"
                        description = "Minimal pve version. Everything lower than this will return CRITICAL."
                }
        }
}


/* ############# Pour les machines virtuelles ############ */

/* 1 – Check du processeur */
object CheckCommand "by_ssh_check_load" {
  /* A warning alert, if CPU is 70% for 5min, 60% for 10mins, 50% for 15mins */
  /* A critical alert, if CPU is 90% for 5min, 80% for 10mins, 70% for 15mins */
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_load -r -w 0.9,0.9,0.9 -c 1,1,0.9 "
}

/* 2 – Check mem */
/* En cours */

/* 3 – Check swap */
object CheckCommand "by_ssh_check_swap" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_swap -w $by_ssh_swap_warn$ -c $by_ssh_swap_crit$"
  vars.by_ssh_swap_warn = "75%"
  vars.by_ssh_swap_crit = "50%"
}

/* 4 – Check espace disque */
object CheckCommand "by_ssh_check_disk" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_disk -w $by_ssh_check_disk_warn$ -c $by_ssh_check_disk_crit$ /"
  vars.by_ssh_check_disk_warn = "100"
  vars.by_ssh_check_disk_crit = "50"
}

/* 5 – Check du temps */
/* En cours */

/* 6 – Check APT */
object CheckCommand "by_ssh_apt" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_apt"
}

/* 7 – Check processus zombie */
object CheckCommand "by_ssh_zombie" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_procs -s Z -c 1"
}

/* 8 – Check uptime */
/* En cours */

/* 9 – Check utilisateurs connecté */
object CheckCommand "by_ssh_check_users" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_users -w 2 -c 3"
}

/* En cours */

/* 10 – Check HTTP */
object CheckCommand "check_http" {
    command = "/usr/lib/nagios/plugins/check_http -H $fqdn$"
}

/* 11 – Check IO */
object CheckCommand "by_ssh_check_io" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_diskstat.sh -d sda -W 20 -C 40"
}

/* ############# Autre/applicatif ############ */

/* 12 – Check Cron */
/* En cours */

/* 12 – Check API */
/* En cours */

object CheckCommand "by_ssh_check_mount" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_mountpoints -a"
}

/* ############# Pour serveurs docker ############ */

object CheckCommand "by_ssh_docker_memory" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_docker --memory 80:90:%"
}

object CheckCommand "by_ssh_docker_cpu" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_docker --cpu 80:100"
}

object CheckCommand "by_ssh_docker_status" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_docker --status running"
}

/* ############# Pour les imprimantes ############ */

object CheckCommand "check_printer_snmp" {
  command = "/usr/lib/nagios/check_snmp_printer -H $address$ -C public -t 'CONSUM ALL' -w 10 -c 5"  
}

/*
Consumables you may monitor:
Black Toner [K] Cartridge;SN4805AF80E00004C6
Yellow Toner [Y] Cartridge;SN45215980E0000465
Magenta Toner [M] Cartridge;SN5712E880E0000412
Cyan Toner [C] Cartridge;SN190A0D80E00004FA
*/
object CheckCommand "check_printer_Xerox7120_Black" { 
command = "/usr/lib/nagios/plugins/check_snmp_printer -H $address$ -C public -t 'CONSUMX Black Toner [K] Cartridge;SN4805AF80E00004C6' -w 10 -c 5" }
object CheckCommand "check_printer_Xerox7120_Yellow" {
command = "/usr/lib/nagios/plugins/check_snmp_printer -H $address$ -C public -t 'CONSUMX Yellow Toner [Y] Cartridge;SN45215980E0000465' -w 10 -c 5" }
object CheckCommand "check_printer_Xerox7120_Magenta" {
command = "/usr/lib/nagios/plugins/check_snmp_printer -H $address$ -C public -t 'CONSUMX Magenta Toner [M] Cartridge;SN5712E880E0000412' -w 10 -c 5" }
object CheckCommand "check_printer_Xerox7120_Cyan" {
command = "/usr/lib/nagios/plugins/check_snmp_printer -H $address$ -C public -t 'CONSUMX Cyan Toner [C] Cartridge;SN190A0D80E00004FA' -w 10 -c 5" }

/*
## Brother HL-5450DN ##
Consumables you may monitor:
Black Toner Cartridge
Drum Unit
*/

object CheckCommand "check_printer_Brother_Black" {
command = "/usr/lib/nagios/plugins/check_snmp_printer -H $address$ -C public -t 'CONSUMX Black Toner Cartridge' -w 15 -c 5" }
object CheckCommand "check_printer_Brother_Drum" {
command = "/usr/lib/nagios/plugins/check_snmp_printer -H $address$ -C public -t 'CONSUMX Drum Unit' -w 15 -c 5" }

/*
## Konica Minolta ##
Consumables you may monitor:
Toner (Cyan)
Toner (Magenta)
Toner (Yellow)
Toner (Black)
Waste Toner Box
*/

object CheckCommand "check_printer_Konica_Black" {
command = "/etc/icinga2/plugin_supplementaires/check_snmp_printer_v4 -H $address$ -C public -t 'CONSUMX Toner (Black)' -w 10 -c 5" }
object CheckCommand "check_printer_Konica_Yellow" {
command = "/etc/icinga2/plugin_supplementaires/check_snmp_printer_v4 -H $address$ -C public -t 'CONSUMX Toner (Yellow)' -w 10 -c 5" }
object CheckCommand "check_printer_Konica_Magenta" {
command = "/etc/icinga2/plugin_supplementaires/check_snmp_printer_v4 -H $address$ -C public -t 'CONSUMX Toner (Magenta)' -w 10 -c 5" }
object CheckCommand "check_printer_Konica_Cyan" {
command = "/etc/icinga2/plugin_supplementaires/check_snmp_printer_v4 -H $address$ -C public -t 'CONSUMX Toner (Cyan)' -w 10 -c 5" }

/* ##################### Serveur Externe ################## */

object CheckCommand "check_httpnew" {
    command = "/usr/lib/nagios/plugins/check_http -H $fqdn$"
}

object CheckCommand "check_http_certificat" {
    command = "/usr/lib/nagios/plugins/check_http -H $fqdn$ -C 30"
}

object CheckCommand "check_http_8080" {
    command = "/usr/lib/nagios/plugins/check_http -H $fqdn$ -p 8080"
}

/* ##################### NAS ################## */

object CheckCommand "by_snmp_qnap_check_hdstatus" {
  command = "/usr/lib/nagios/plugins/check_qnap2.sh -H $address$ -a hdstatus"
}

object CheckCommand "by_snmp_qnap_check_raidstatus" {
  command = "/usr/lib/nagios/plugins/check_qnap2.sh -H $address$ -a raidstatus"
}

object CheckCommand "by_snmp_qnap_check_diskusage" {
  command = "/usr/lib/nagios/plugins/check_qnap2.sh -H $address$ -a diskusage"
}

/* ##################### Applicatif ############ */



/* ##################### Custom script  ############ */

object CheckCommand "by_ssh_docker_version_vox" {
  import "by_ssh"
  vars.by_ssh_command = "/usr/lib/nagios/plugins/check_vox_dpkg"
}


/* ######### Notification  ############ */

object NotificationCommand "mail-host-notification" {
  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]
  arguments += {
    "-4" = {
      required = true
      value = "$notification_address$"
    }
    "-6" = "$notification_address6$"
    "-b" = "$notification_author$"
    "-c" = "$notification_comment$"
    "-d" = {
      required = true
      value = "$notification_date$"
    }
    "-f" = {
      value = "$notification_from$"
      description = "Set from address. Requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE)"
    }
    "-i" = "$notification_icingaweb2url$"
    "-l" = {
      required = true
      value = "$notification_hostname$"
    }
    "-n" = {
      required = true
      value = "$notification_hostdisplayname$"
    }
    "-o" = {
      required = true
      value = "$notification_hostoutput$"
    }
    "-r" = {
      required = true
      value = "$notification_useremail$"
    }
    "-s" = {
      required = true
      value = "$notification_hoststate$"
    }
    "-t" = {
      required = true
      value = "$notification_type$"
    }
    "-v" = "$notification_logtosyslog$"
  }
  vars += {
    notification_address = "$address$"
    notification_address6 = "$address6$"
    notification_author = "$notification.author$"
    notification_comment = "$notification.comment$"
    notification_type = "$notification.type$"
    notification_date = "$icinga.long_date_time$"
    notification_hostname = "$host.name$"
    notification_hostdisplayname = "$host.display_name$"
    notification_hostoutput = "$host.output$"
    notification_hoststate = "$host.state$"
    notification_useremail = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]
  arguments += {
    "-4" = {
      required = true
      value = "$notification_address$"
        }
    "-6" = "$notification_address6$"
    "-b" = "$notification_author$"
    "-c" = "$notification_comment$"
    "-d" = {
      required = true
      value = "$notification_date$"
    }
    "-e" = {
      required = true
      value = "$notification_servicename$"
    }
    "-f" = {
      value = "$notification_from$"
      description = "Set from address. Requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE)"
    }
    "-i" = "$notification_icingaweb2url$"
    "-l" = {
      required = true
      value = "$notification_hostname$"
    }
    "-n" = {
      required = true
      value = "$notification_hostdisplayname$"
    }
    "-o" = {
      required = true
      value = "$notification_serviceoutput$"
    }
    "-r" = {
      required = true
      value = "$notification_useremail$"
    }
    "-s" = {
      required = true
      value = "$notification_servicestate$"
    }
    "-t" = {
      required = true
      value = "$notification_type$"
    }
    "-u" = {
      required = true
      value = "$notification_servicedisplayname$"
    }
    "-v" = "$notification_logtosyslog$"
  }
  vars += {
    notification_address = "$address$"
    notification_address6 = "$address6$"
    notification_author = "$notification.author$"
    notification_comment = "$notification.comment$"
    notification_type = "$notification.type$"
    notification_date = "$icinga.long_date_time$"
    notification_hostname = "$host.name$"
    notification_hostdisplayname = "$host.display_name$"
    notification_servicename = "$service.name$"
    notification_serviceoutput = "$service.output$"
    notification_servicestate = "$service.state$"
    notification_useremail = "$user.email$"
    notification_servicedisplayname = "$service.display_name$"
  }
}
